<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Socket.IO 채팅</title>
    <!-- cdn -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
      body {
        font-family: 'Arial', sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh;
      }

      h1 {
        color: #005397;
      }

      main {
        display: flex;
        flex-direction: column;
        align-items: center;
      }

      .entry-box {
        margin-bottom: 20px;
        display: flex;
        flex-direction: row;
        align-items: center;
      }

      #nickname {
        padding: 8px;
        margin-bottom: 8px;
      }

      .chat-box {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 70%;
        max-width: 600px;
      }

      .chat-list {
        background-color: #f9f9f9;
        width: 100%;
        height: 300px;
        padding: 10px;
        overflow-y: auto;
      }

      .notice {
        text-align: center;
        color: #005397;
        font-size: 12px;
        padding: 5px;
        background-color: #e1f5fe;
        margin-bottom: 10px;
        border-radius: 5px;
      }

      select,
      input,
      button {
        margin: 8px;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
      }

      button {
        background-color: #005397;
        color: #fff;
        cursor: pointer;
        transition: background-color 0.3s ease;
      }

      button:hover {
        background-color: #003366;
      }

      .my-chat,
      .other-chat,
      .private-chat {
        margin-top: 10px;
        display: flex;
        justify-content: flex-end;
      }

      .my-chat div,
      .other-chat div,
      .private-chat div {
        max-width: 70%;
        padding: 8px;
        border-radius: 8px;
        margin: 5px;
        word-wrap: break-word;
      }

      .my-chat div {
        background-color: #ffca28;
        color: #333;
        text-align: right;
        margin-left: auto;
      }

      .other-chat div {
        background-color: #ffffff;
        color: #333;
        text-align: left;
        margin-right: auto;
      }
      .private-chat div {
        background-color: #ffcccb;
        color: #333;
        text-align: left;
        margin-right: auto;
      }

      .input-container {
        display: flex;
        align-items: center;
      }

      .input-container select,
      .input-container input,
      .input-container button {
        margin: 8px;
      }
    </style>
  </head>
  <body>
    <h1></h1>

    <main class="chat-box">
      <div class="entry-box">
        <input
          type="text"
          id="nickname"
          placeholder="닉네임"
          autofocus
          onkeypress="if(window.event.keyCode==13){join()}"
        />
        <button type="button" onclick="join();">입장</button>
      </div>
      <div class="chat-list">
        <!-- Updated styles for my-chat and other-chat -->
        <div class="my-chat">
          <!-- <div>user1 : msg1</div> -->
        </div>
        <div class="other-chat">
          <!-- <div>user2 : msg2</div> -->
        </div>
        <div class="private-chat">
          <!-- <div>user2 : msg2</div> -->
        </div>
      </div>
      <!-- Message input and send button -->
      <div class="input-container">
        <select id="nick-list"></select>
        에게
        <input
          type="text"
          id="message"
          onkeypress="if(window.event.keyCode==13){send()}"
        />
        <button type="button" onclick="send();">전송</button>
      </div>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성
      let myNick;
      socket.on('connect', () => {
        console.log('클라이언트 연결 완료 :: ', socket.id);
      });

      socket.on('notice', (msg) => {
        document
          .querySelector('.chat-list')
          .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
      });

      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);
      }

      function send() {
        const messageInput = document.querySelector('#message');
        const receiver = document.querySelector('#nick-list').value;
        console.log(receiver);
        if (receiver === 'all') {
          socket.emit('sendToAll', {
            nickName: document.querySelector('#nickname').value,
            content: messageInput.value,
          });
          messageInput.value = '';
        } else {
          socket.emit('sendToOne', {
            receiver,
            content: messageInput.value,
            nickName: document.querySelector('#nickname').value,
          });
          messageInput.value = '';
        }
      }

      socket.on('error', (data) => {
        alert(data);
      });

      socket.on('entrySuccess', (nick) => {
        myNick = nick;
        document.querySelector('#nickname').disabled = true;
        document.querySelector('.entry-box>button').disabled = true;
        document.querySelector('.chat-box').classList.remove('d-none');
      });

      socket.on('updateNicks', (nickObjs) => {
        let options = `<option value="all">전체</option>`;
        for (let key in nickObjs) {
          options += `<option value="${key}">${nickObjs[key]}</option>`;
        }
        document.querySelector('#nick-list').innerHTML = options;
      });

      socket.on('message', (data) => {
        console.log(data);
        const { nickName, content } = data;

        const messageDiv = document.createElement('div');
        messageDiv.classList.add(
          myNick === nickName ? 'my-chat' : 'other-chat'
        );
        messageDiv.innerHTML = `<div>${data.nickName} : ${data.content}</div>`;

        document.querySelector('.chat-list').appendChild(messageDiv);

        const chatList = document.querySelector('.chat-list');
        chatList.scrollTop = chatList.scrollHeight;
      });
      socket.on('privateMessage', (data) => {
        console.log('귓속말: ', data, myNick);
        const { nickName, content } = data;
        const messageDiv = document.createElement('div');
        messageDiv.classList.add(
          myNick === nickName ? 'my-chat' : 'private-chat'
        );
        messageDiv.innerHTML = `<div>(귓속말)${data.nickName} : ${data.content}</div>`;
        document.querySelector('.chat-list').appendChild(messageDiv);
        const chatList = document.querySelector('.chat-list');
        chatList.scrollTop = chatList.scrollHeight;
      });
    </script>
  </body>
</html>
