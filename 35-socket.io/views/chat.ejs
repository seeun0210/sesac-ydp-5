<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>socket.io 채팅</title>
    <!-- cdn -->
    <script src="/socket.io/socket.io.js"></script>

    <style>
      /* [실습2] 채팅창 UI 만들기 */
      .chat-list {
        background-color: skyblue;
        width: 50%;
        height: 500px;
        padding: 10px;
        overflow-y: auto;
      }

      .chat-list div {
        margin-top: 3px;
      }

      .chat-list div div {
        display: inline-block;
        padding: 3px;
      }

      .my-chat {
        text-align: right;
      }

      .my-chat div {
        background-color: yellow;
      }

      .other-chat div {
        background-color: white;
      }

      /* [실습3] 채팅창 입장 안내 문구 */
      .notice {
        text-align: center;
        color: #005397;
        font-size: 12px;
      }
    </style>
  </head>
  <body>
    <h1>My Chat</h1>

    <!-- [실습1] 각 버튼 누를 때 마다 서버로 메세지 보내기 -->
    <!-- <button onclick="sayHello()">Hello</button>
    <button onclick="sayStudy()">Study</button>
    <button onclick="sayBye()">Bye</button>
    <p id="form-server"></p> -->

    <!-- [실습2] 채팅 UI -->
    <main class="chat-box">
      <div class="entry-box">
        <input
          type="text"
          id="nickname"
          placeholder="닉네임"
          autofocus
          onkeypress="if(window.event.keyCode==13){join()}"
        />
        <button type="button" onclick="join();">입장</button>
      </div>
      <div class="chat-list">
        <!-- 임시 대화 데이터 -->
        <div class="my-chat">
          <div>user1 : msg1</div>
        </div>
        <div class="other-chat">
          <div>user2 : msg2</div>
        </div>
      </div>
      <!-- 메세지 전송 영역 -->
      <select id="nick-list"></select
      >에게
      <input
        type="text"
        id="message"
        onkeypress="if(window.event.keyCode==13){send()}"
      />
      <button type="button" onclick="send();">전송</button>
    </main>

    <script>
      let socket = io.connect(); // 소켓 사용을 위한 객체 생성

      socket.on('connect', () => {
        console.log('클라리언트 연결 완료 :: ', socket.id);
      });

      // [실습1]
      //   function sayHello() {
      //     socket.emit('hello', { who: 'client', msg: 'hello' });
      //   }

      //   socket.on('helloKr', (data) => {
      //     // console.count(data);
      //     document.querySelector(
      //       '#form-server'
      //     ).textContent = `${data.who} : ${data.msg}`;
      //   });

      socket.on('notice', (msg) => {
        document
          .querySelector('.chat-list')
          .insertAdjacentHTML('beforeend', `<div class="notice">${msg}</div>`);
      });
      function join() {
        socket.emit('setNick', document.querySelector('#nickname').value);
      }

      socket.on('error', (data) => {
        alert(data);
      });
      socket.on('entrySuccess', (nick) => {
        myNick = nick;
        document.querySelector('#nickname').disabled = true;
        document.querySelector('.entry-box>button').disabled = true;
        document.querySelector('.chat-box').classList.remove('d-none');
      });
      socket.on('updateNicks', (nickObjs) => {
        console.log(nickObjs);
        let options = `<option value="all">전체</option>`;
        for (let key in nickObjs) {
          options += `<option value="${key}">"${nickObjs[key]}"</option>`;
        }
        document.querySelector('#nick-list').innerHTML = options;
      });
    </script>
  </body>
</html>
